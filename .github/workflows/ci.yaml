name: CI pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: install dependencies
        run: |
          pip install -r requirements.txt
          python3.10 -c "import nltk; nltk.download('stopwords')"
          python3.10 -c "import nltk; nltk.download('wordnet')"

      - name: run pipeline
        env:
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_TOKEN }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          dvc repro

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add changes to Git
        run: |
          git add .

      - name: Commit changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: |
          git commit -m "Automated commit of DVC outputs and updated code" || echo "No changes to commit"

      - name: Push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin ${{ github.ref_name }}

      - name: test run
        env:
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_TOKEN }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python3.10 -m unittest discover -s scripts -p "model_test.py"

      - name: promote model
        if: success()
        env:
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_TOKEN }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          python3.10 scripts/promote_model.py

      - name: Login to AWS ECR
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 038462774337.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        if: success()
        run: |
          docker build --build-arg MLFLOW_TRACKING_USERNAME=${{ secrets.AWS_ACCESS_KEY_ID }} --build-arg MLFLOW_TRACKING_PASSWORD=${{ secrets.AWS_ACCESS_KEY_ID }} -t spynom .

      - name: Tag Docker image
        if: success()
        run: |
          docker tag spynom:latest 038462774337.dkr.ecr.us-east-1.amazonaws.com/spynom:latest

      - name: Push Docker image to AWS ECR
        if: success()
        run: |
          docker push 038462774337.dkr.ecr.us-east-1.amazonaws.com/spynom:latest

      # Zip the required files
      - name: Zip files for deployment
        if: success()
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_docker.sh

      # Upload the ZIP file to S3
      - name: Upload ZIP to S3
        if: success()
        run: |
          aws s3 cp deployment.zip s3://spynomcodedeploybucket/deployment.zip

      # Deploy to AWS CodeDeploy using the uploaded ZIP file
      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name MyDockerApp2 \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name MyDockerAppASGDeploymentGroup \
            --s3-location bucket=spynomcodedeploybucket,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region ap-southeast-2